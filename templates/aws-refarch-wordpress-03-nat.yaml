AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host WordPress on AWS - Creates NAT Instances

Metadata:
  Authors:
    Description: Darryl Osborne (darrylo@amazon.com)
  License:
    Description:
      'Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at
      http://aws.amazon.com/asl/
      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon VPC Parameters
        Parameters:
          - NumberOfSubnets
          - Subnet
          - NatInstanceType
          - EC2KeyName
          - NatSecurityGroup
          - NatRouteTable
    ParameterLabels:
      Subnet:
        default: Subnets
      NumberOfSubnets:
        default: Number of subnets
      NatInstanceType:
        default: Instance Type
      EC2KeyName:
        default: Existing Key Pair
      NatSecurityGroup:
        default: Web Security Group
      NatRouteTable:
        default: Nat Route Table

Parameters:
  NatRouteTable:
    Description: List of nat route tables
    Type: CommaDelimitedList
  NatSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  EC2KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  Subnet:
    Description: Select existing subnets. The number selected must match the number of subnets above. Subnets selected must be in separate AZs.
    Type: List<AWS::EC2::Subnet::Id>
  NumberOfSubnets:
    AllowedValues:
      - 2
      - 3
    Default: 3
    Description: Number of subnets. This must match your selections in the list of subnets below.
    Type: String
  NatInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.nano
    Description: The Amazon EC2 instance type for your nat instances.
    Type: String

Mappings:
  NatRegionMap:
    us-east-1:
      AMI: ami-0422d936d535c63b1
    us-west-1:
      AMI: ami-a98396ec
    us-west-2:
      AMI: ami-40d1f038
    eu-west-1:
      AMI: ami-14913f63
    eu-central-1:
      AMI: ami-ae380eb3
    sa-east-1:
      AMI: ami-8122969c
    ap-southeast-1:
      AMI: ami-6aa38238
    ap-southeast-2:
      AMI: ami-893f53b3
    ap-northeast-1:
      AMI: ami-27d6e626

Conditions:
  NumberOfSubnets1: !Equals [1, !Ref NumberOfSubnets]
  NumberOfSubnets2: !Equals [2, !Ref NumberOfSubnets]
  NumberOfSubnets3: !Equals [3, !Ref NumberOfSubnets]

  AZ0: !Or
    - !Condition NumberOfSubnets1
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets3
  AZ1: !Or
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets2
  AZ2: !Condition NumberOfSubnets3

Resources:
  NatAutoScalingGroup0:
    Condition: AZ0
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref NatLaunchConfiguration0
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: !Join ['', ['NAT / ', !Ref 'AWS::StackName']]
          PropagateAtLaunch: true
      VPCZoneIdentifier:
       - !Select [0, !Ref Subnet]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  NatAutoScalingGroup1:
    Condition: AZ1
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref NatLaunchConfiguration1
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: !Join ['', ['NAT / ', !Ref 'AWS::StackName']]
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Select [1, !Ref Subnet]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  NatAutoScalingGroup2:
    Condition: AZ2
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref NatLaunchConfiguration2
      MaxSize: '1'
      MinSize: '1'
      Tags:
        - Key: Name
          Value: !Join ['', ['NAT / ', !Ref 'AWS::StackName']]
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Select [2, !Ref Subnet]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  NatLaunchConfiguration0:
    Condition: AZ0
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          configure_nat:
            - configure_nat
        configure_nat:
          files:
            /tmp/configure_nat.sh:
              content: !Join [
                '',
                [
                  "#!/bin/bash -x\n",
                  "instance=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${availability_zone:0:-1}\n",
                  "aws ec2 modify-instance-attribute --region ${region} --instance-id ${instance} --source-dest-check '{\"Value\": false}'\n",
                  "aws ec2 replace-route --region ${region} --route-table-id ",
                  !Select [0, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance ",
                  "|| aws ec2 create-route --region ${region} --route-table-id ",
                  !Select [0, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance\n"
                ]
              ]
              mode: 000500
              owner: root
              group: root
          commands:
            configure_nat:
              command: ./configure_nat.sh
              cwd: /tmp
              ignoreErrors: false

    Properties:
      AssociatePublicIpAddress: true
      InstanceType: !Ref NatInstanceType
      IamInstanceProfile: !Ref NatInstanceProfile
      ImageId: !FindInMap [NatRegionMap, !Ref 'AWS::Region', AMI]
      InstanceMonitoring: true
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref NatSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          runcmd:
            - yum update -y && yum install -y yum-cron && chkconfig yum-cron on
            - /opt/aws/bin/cfn-init --configsets configure_nat --verbose --stack ${AWS::StackName} --resource NatLaunchConfiguration0 --region ${AWS::Region}
            - /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource NatAutoScalingGroup0 --region ${AWS::Region}

  NatLaunchConfiguration1:
    Condition: AZ1
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          configure_nat:
            - configure_nat
        configure_nat:
          files:
            /tmp/configure_nat.sh:
              content: !Join [
                '',
                [
                  "#!/bin/bash -x\n",
                  "instance=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${availability_zone:0:-1}\n",
                  "aws ec2 modify-instance-attribute --region ${region} --instance-id ${instance} --source-dest-check '{\"Value\": false}'\n",
                  "aws ec2 replace-route --region ${region} --route-table-id ",
                  !Select [1, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance ",
                  "|| aws ec2 create-route --region ${region} --route-table-id ",
                  !Select [1, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance\n"
                ]
              ]
              mode: 000500
              owner: root
              group: root
          commands:
            configure_nat:
              command: ./configure_nat.sh
              cwd: /tmp
              ignoreErrors: false

    Properties:
      AssociatePublicIpAddress: true
      InstanceType: !Ref NatInstanceType
      IamInstanceProfile: !Ref NatInstanceProfile
      ImageId: !FindInMap [NatRegionMap, !Ref 'AWS::Region', AMI]
      InstanceMonitoring: true
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref NatSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          runcmd:
            - yum update -y && yum install -y yum-cron && chkconfig yum-cron on
            - /opt/aws/bin/cfn-init --configsets configure_nat --verbose --stack ${AWS::StackName} --resource NatLaunchConfiguration1 --region ${AWS::Region}
            - /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource NatAutoScalingGroup1 --region ${AWS::Region}

  NatLaunchConfiguration2:
    Condition: AZ2
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          configure_nat:
            - configure_nat
        configure_nat:
          files:
            /tmp/configure_nat.sh:
              content: !Join [
                '',
                [
                  "#!/bin/bash -x\n",
                  "instance=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${availability_zone:0:-1}\n",
                  "aws ec2 modify-instance-attribute --region ${region} --instance-id ${instance} --source-dest-check '{\"Value\": false}'\n",
                  "aws ec2 replace-route --region ${region} --route-table-id ",
                  !Select [2, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance ",
                  "|| aws ec2 create-route --region ${region} --route-table-id ",
                  !Select [2, !Ref NatRouteTable],
                  " --destination-cidr-block '0.0.0.0/0' --instance-id $instance\n"
                ]
              ]
          commands:
            configure_nat:
              command: ./configure_nat.sh
              cwd: /tmp
              ignoreErrors: false

    Properties:
      AssociatePublicIpAddress: true
      InstanceType: !Ref NatInstanceType
      IamInstanceProfile: !Ref NatInstanceProfile
      ImageId: !FindInMap [NatRegionMap, !Ref 'AWS::Region', AMI]
      InstanceMonitoring: true
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - !Ref NatSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          runcmd:
            - yum update -y && yum install -y yum-cron && chkconfig yum-cron on
            - /opt/aws/bin/cfn-init --configsets configure_nat --verbose --stack ${AWS::StackName} --resource NatLaunchConfiguration2 --region ${AWS::Region}
            - /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource NatAutoScalingGroup2 --region ${AWS::Region}


  NatInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref NatInstanceRole
  NatInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                Resource:
                  - '*'
